---
title: "Homework 3"
format: html
---

# Homework 3

## Task 1: Conceptual Questions

1.  If your working directory is `myfolder/homework/`, what relative path would you specify to get the file located at `myfolder/MyData.csv`? \> ../MyData.csv

2.  What are the major benefits of using R projects? \> - Keep related files organized \> - Simplifies the process of setting the working directory \> - Facilitates collaboration with Git integration

3.  What is git and what is GitHub? \> - **Git** is a version control system for tracking changes in files and coordinating work on those files among multiple people. \> - **GitHub** is a web-based platform that uses Git for version control and provides hosting for software development and version control using Git.

4.  What are the two main differences between a tibble and a data.frame? \> - Tibbles do not convert character vectors to factors by default. \> - Tibbles are more modern and have better printing methods that show only the top 10 rows and the columns that fit on the screen.

5.  Rewrite the following nested function call using base R's chaining operator:

as_tibble(iris) \|\> select(starts_with("Petal"), Species) \|\> filter(Petal.Length \< 1.55) \|\> arrange(Species)

6.  What is meant by long format data and wide format data? Which do we generally prefer for statistical analysis?

Long format data has one column for all values and another column for variable names. It is generally preferred for statistical analysis.Wide format data has separate columns for each variable.

Task 2: Reading Delimited Data

## 1. Glass Data:

```{r}
library(tidyverse)

# Read the glass data from the URL
glass_data <- read_csv("https://www4.stat.ncsu.edu/~online/datasets/glass.data", col_names = FALSE)

# Define the column names
colnames(glass_data) <- c("Id", "RI", "Na", "Mg", "Al", "Si", "K", "Ca", "Ba", "Fe", "Type_of_glass")

# Print the tibble
glass_data

# Modify the Type_of_glass variable
glass_data <- glass_data %>%
  mutate(Type_of_glass = case_when(
    Type_of_glass == 1 ~ "building_windows_float_processed",
    Type_of_glass == 2 ~ "building_windows_non_float_processed",
    Type_of_glass == 3 ~ "vehicle_windows_float_processed",
    Type_of_glass == 5 ~ "containers",
    Type_of_glass == 6 ~ "tableware",
    Type_of_glass == 7 ~ "headlamps"
  ))

# Filter the data
glass_filtered <- glass_data %>%
  filter(Fe < 0.2, Type_of_glass %in% c("tableware", "headlamps"))

# Print the filtered data
glass_filtered

```

Yeast Data

```{r}

library(tidyverse)

# Define the URL for the yeast data
yeast_url <- "https://www4.stat.ncsu.edu/~online/datasets/yeast.data"

# Read the yeast data from the URL with a custom delimiter of two spaces
yeast_data <- read_delim(yeast_url, delim = "  ", col_names = FALSE, trim_ws = TRUE)

# Define the correct column names
column_names <- c("seq_name", "mcg", "gvh", "alm", "mit", "erl", "pox", "vac", "nuc", "class")

# Assign the column names to the yeast_data tibble
colnames(yeast_data) <- column_names

# Print the tibble to verify the data
print(yeast_data)

# Remove the seq_name and nuc columns
yeast_data <- yeast_data %>%
  select(-seq_name, -nuc)

# Add columns for the mean and median of each numeric variable at each class grouping
yeast_summary <- yeast_data %>%
  group_by(class) %>%
  summarize(across(c(mcg, gvh, alm, mit, erl, pox, vac), 
                   list(mean = mean, median = median), 
                   .names = "{.fn}_{.col}"))

# Print the summarized data
print(yeast_summary)


```

Wine Data\

```{r}
library(readxl)

# Read the white wine data from the first sheet
white_wine <- read_excel("C:/Users/karen/Downloads/hw3 data/white-wine.xlsx", sheet = 1)

# Print the tibble to verify the data
white_wine

# Read the variable names from the second sheet
column_names <- read_excel("C:/Users/karen/Downloads/hw3 data/white-wine.xlsx", sheet = 2)

# Overwrite the current column names
colnames(white_wine) <- column_names[[1]]

# Add a column indicating the wine type
white_wine <- white_wine %>%
  mutate(type = "white")

# Print the updated tibble
white_wine

```

\

```{r}
library(tidyverse)
library(readr)
library(readxl)

# Define the URL for the red wine data
red_wine_url <- "https://www4.stat.ncsu.edu/~online/datasets/red-wine.csv"

# Read the red wine data from the URL with a semi-colon delimiter
red_wine_data <- read_delim(red_wine_url, delim = ";", col_names = TRUE)

# Print the tibble to verify the data
print(red_wine_data)

# Read the new column names from the second sheet of the white wine Excel file
new_column_names <- read_excel("C:/Users/karen/Downloads/hw3 data/white-wine.xlsx", sheet = 2) %>%
  pull()

# Assign the new column names to the red wine data
colnames(red_wine_data) <- new_column_names

# Print the tibble to verify the new column names
print(red_wine_data)

# Add a column denoting the type as "red"
red_wine_data <- red_wine_data %>%
  mutate(type = "red")

# Print the tibble to verify the addition of the new column
print(red_wine_data)
```

```{r}
# Combine the two data sets
wine_data <- bind_rows(white_wine, red_wine_data)

# Print the combined data
wine_data

# Filter and summarize the combined data
high_quality_wine <- wine_data %>%
  filter(quality > 6.5, alcohol < 132) %>%
  arrange(desc(quality)) %>%
  select(contains("acid"), alcohol, type, quality) %>%
  group_by(quality) %>%
  summarize(
    mean_alcohol = mean(alcohol),
    sd_alcohol = sd(alcohol),
    .groups = "drop"
  )

# Print the filtered and summarized data
high_quality_wine

```

Database Practice

```{r}
# Load necessary libraries
library(DBI)
library(RSQLite)
library(dplyr)

# Connect to the Lahman database
con <- dbConnect(RSQLite::SQLite(), "C:/Users/karen/Downloads/hw3 data/lahman.db")

# List all tables in the database
tables <- dbListTables(con)
print(tables)

# Retrieve data from the Teams table for the year 2015 using dplyr
teams_2015 <- tbl(con, "Teams") %>%
  filter(yearID == 2015) %>%
  collect()

# Print the retrieved data
print(teams_2015)

# Retrieve data from the Teams table for the year 2015 using SQL
teams_2015_sql <- tbl(con, sql("SELECT * FROM Teams WHERE yearID = 2015")) %>%
  collect()

# Print the retrieved data
print(teams_2015_sql)

# Retrieve all players in the Hall of Fame, the year they were voted in, and their category
hall_of_fame <- tbl(con, "HallOfFame") %>%
  filter(inducted == "Y") %>%
  select(playerID, yearID, category) %>%
  collect()

# Print the retrieved data
print(hall_of_fame)

# Retrieve People table as a local data frame
people <- tbl(con, "People") %>%
  select(playerID, nameFirst, nameLast) %>%
  collect()

# Combine Hall of Fame data with People table to add first and last names
hall_of_fame_with_names <- hall_of_fame %>%
  inner_join(people, by = "playerID")

# Print the combined data
print(hall_of_fame_with_names)

# Retrieve and summarize manager data
managers_summary <- tbl(con, "Managers") %>%
  select(playerID, G, W, L) %>%
  group_by(playerID) %>%
  summarize(
    G_managed = sum(G, na.rm = TRUE),
    Total_W = sum(W, na.rm = TRUE),
    Total_L = sum(L, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  mutate(win_loss_percentage = Total_W / G_managed) %>%
  arrange(desc(win_loss_percentage)) %>%
  collect()

# Print the summarized data
print(managers_summary)

# Combine hall of fame and manager data
combined_data <- hall_of_fame_with_names %>%
  inner_join(managers_summary, by = "playerID")

# Print the combined data
print(combined_data)


```
